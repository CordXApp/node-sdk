generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_URI")
}

//-- ENTITY MODEL CAN BE A USER, BOT OR ORGANIZATION ENTITY --//
model Entity {
    id        String       @id @default(uuid()) // Unique identifier for the entity
    name      String       @db.Text // The name of the entity
    type      EntityType   @default(DISCORD_USER) // The type of entity (User, Bot or Organization)
    handle    String       @db.Text // The handle of the entity (ie: @cordx)
    biography String?      @db.LongText // The biography of the entity
    avatar    String?      @db.Text // The avatar image for the entity
    banner    String?      @db.Text // The banner image for the entity
    userid    String?      @db.Text // The Discord User ID of the entity (if entity is a user)
    botid     String?      @db.Text // The Discord Client ID of the entity (if entity is a bot)
    webhook   String?      @db.Text // The Discord Webhook URL (if entity has a webhook)
    domain    String?      @db.Text // The domain of the entity
    apiKey    String       @db.Text // The API key for the entity 
    owner     String?      @db.Text // The owner of the entity (if entity is an organization)
    perms     UserPerms[] // User permissions within the CordX System (if entity is a user)
    domains   Domains[] // Domains owned by the entity (ie: cordx.dev)
    uploads   Uploads[] // Uploads by the entity (ie: images, files)
    webhooks  Webhooks[] // Webhooks for the entity (ie: Discord Webhook)
    members   OrgMembers[] // Organization members (if entity is an organization)
    following Followers[]  @relation("FollowingRelation") // Users or Orgs the entity is following
    followers Followers[]  @relation("FollowersRelation") // Users or Orgs following this entity
    createdAt DateTime     @default(now()) // The date the entity was created
    updatedAt DateTime?    @updatedAt // The date the entity was last updated
}

//-- CORDX BLOG POSTS AND AUTHOR(S) --//
model BlogPost {
    id        String    @id @default(uuid()) // Unique identifier for the blog post
    title     String    @db.VarChar(255) // The title of the blog post
    content   String    @db.LongText // The content of the blog post
    published Boolean   @default(false) // Indicates if the blog post is published
    authorId  String // Foreign key to the Author model
    author    Author    @relation(fields: [authorId], references: [id]) // Relation to the Author model
    createdAt DateTime  @default(now()) // The date the blog post was created
    updatedAt DateTime? @updatedAt // The date the blog post was last updated
}

//-- AUTHOR MODEL --//
model Author {
    id        String     @id @default(uuid()) // Unique identifier for the author
    name      String     @db.VarChar(255) // The name of the author
    bio       String?    @db.LongText // The biography of the author
    avatar    String?    @db.Text // The avatar image for the author
    logo      String?    @db.Text // The logo of the author
    blogPosts BlogPost[] // List of blog posts written by the author
    createdAt DateTime   @default(now()) // The date the author was created
    updatedAt DateTime?  @updatedAt // The date the author was last updated
}

//-- A USERS PERMISSIONS WITHIN THE CORDX SYSTEM --//
model UserPerms {
    id         String          @id @default(uuid())
    entityId   String
    entity     Entity          @relation(fields: [entityId], references: [id])
    permission UserEntityPerms @default(BASE_USER)
    createdAt  DateTime        @default(now())
    updatedAt  DateTime?       @updatedAt

    @@unique([entityId, permission])
}

//-- A MEMBERS PERMISSIONS WITHIN AN ORGANIZATION --//
model MemberPerms {
    id          String         @id @default(uuid())
    orgMemberId String
    orgMember   OrgMembers     @relation(fields: [orgMemberId], references: [id])
    permission  OrgMemberPerms @default(GUEST)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime?      @updatedAt

    @@unique([orgMemberId, permission])
}

//-- A LIST OF MEMBERS WITHIN AN ORGANIZATION --//
model OrgMembers {
    id     String        @id @default(uuid())
    org    Entity        @relation(fields: [orgId], references: [id])
    orgId  String
    roles  MemberPerms[]
    userId String        @unique

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@unique([orgId, userId])
}

//-- A LIST OF FOLLOWERS AND FOLLOWING FOR USERS AND ORGS --//
model Followers {
    id          String    @id @default(uuid())
    followerId  String
    follower    Entity    @relation(fields: [followerId], references: [id], name: "FollowingRelation")
    followingId String
    following   Entity    @relation(fields: [followingId], references: [id], name: "FollowersRelation")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt

    @@unique([followerId, followingId])
}

//-- A LIST OF DOMAINS OWNED BY A ENTITY --//
model Domains {
    id       String  @id @default(uuid())
    name     String  @db.VarChar(255)
    content  String  @db.LongText
    verified Boolean @default(false)
    active   Boolean @default(true)
    entityId String
    entity   Entity  @relation(fields: [entityId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@unique([name, entityId])
}

// -- A LIST OF UPLOADS FOR A ENTITY --//
model Uploads {
    id        String    @id @default(uuid())
    name      String? // The name of the file
    type      String? // The type of the file (ie: image/png)
    mime      String? // The MIME type of the file (ie: png)
    size      Int? // The size of the file in bytes (ie: 1024)
    fileId    String? // The File ID (this is generated by the storage provider)
    fileName  String? // The generated File Name (312g83g8213126.png)
    shareable Boolean?  @default(false) // If the file is shareable
    entityId  String // The Entity ID (User, Bot  or Organization)
    entity    Entity    @relation(fields: [entityId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@unique([fileId, entityId])
}

model Webhooks {
    id       String  @id @default(uuid()) // The unique identifier for the webhook 
    name     String  @db.Text // The name of the webhook (IE: Discord Webhook)
    token    String  @db.Text // The token for the webhook
    enabled  Boolean @default(true) // If the webhook is enabled
    hook_url String  @db.Text // The URL for the webhook
    entityId String // The Entity ID (User, Bot or Organization)
    entity   Entity  @relation(fields: [entityId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

//-- ERROR REPORTING AND TRACKING SYSTEM (SNAILY) --//
model errors {
    id        String    @id @default(uuid()) // Unique identifier for the error
    state     ErrStates @default(OPEN) // The state of the error
    type      ErrTypes  @default(UNKNOWN_ERR) // The type of the error
    status    String    @db.Text // The status of the error
    message   String    @db.LongText // The error message
    reporter  String    @db.Text // The user who reported the error
    error_obj Json // The error object
    createdAt DateTime  @default(now()) // The date the error was created
    updatedAt DateTime? @updatedAt // The date the error was last updated
}

//-- PARTNER SYSTEM FOR CORDX --//
model partners {
    id     String @id @default(uuid()) // Unique identifier for the partner
    name   String @db.Text // The partner name
    image  String @db.Text // The partner image
    bio    String @db.LongText // The partner bio
    url    String @db.Text // The partner URL
    social String @db.Text // The partner social link
}

//-- REPORTING SYSTEM FOR CORDX --//
model reports {
    id        String       @id @default(uuid()) // Unique identifier for the report
    type      ReportTypes  @default(BUG_REPORT) // The type of the report
    status    ReportStatus @default(OPEN) // The status of the report
    author    String       @db.Text // The user who reported the issue
    reason    String       @db.LongText // The reason for the report
    mod       String?      @db.Text // The moderator assigned to the report
    createdAt DateTime     @default(now()) // The date the report was created
    updatedAt DateTime?    @updatedAt // The date the report was last updated
}

enum EntityType {
    DISCORD_USER // Allows discord users to create an account and upload images and files
    INTEGRATION // Allows the creation of integrations with discord bots and other services
    ORGANIZATION // Allows a user to create organizations for their apps/services
}

enum UserEntityPerms {
    CORDX_OWNER
    CORDX_ADMIN
    CORDX_STAFF
    CORDX_DEV
    BETA_TESTER
    BANNED_USER
    VERIFIED_USER
    BASE_USER
}

enum OrgMemberPerms {
    OWNER
    ADMIN
    EDITOR
    READER
    VERIFIED
    BANNED
    GUEST
}

enum ReportTypes {
    BUG_REPORT
    FEATURE_REQUEST
    PARTNER_REQUEST
    PARTNER_REPORT
    USER_REPORT
    IMAGE_REPORT
    DOMAIN_REPORT
    WEBHOOK_REPORT
    ORG_REPORT
}

enum ReportStatus {
    OPEN
    INVESTIGATING
    INFO_NEEDED
    CLOSED
}

enum ErrTypes {
    API_ERR
    AUTH_ERR
    BUCKET_ERR
    CACHE_ERR
    CLIENT_ERR
    DB_ERR
    EXTERNAL_ERR
    INTERNAL_ERR
    UPLOAD_ERR
    USER_ERR
    WEBHOOK_ERR
    UNKNOWN_ERR
}

enum ErrStates {
    OPEN
    INVESTIGATING
    RESOLVED
    IGNORED
}
